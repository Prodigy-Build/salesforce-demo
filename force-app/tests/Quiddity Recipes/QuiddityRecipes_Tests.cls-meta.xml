@isTest
private inherited sharing class CanTheUser_Tests {
    
    @isTest
    static void canCrudAccountCreatePositive() {
        System.Assert.isTrue(
            CanTheUser.crud(new Account(), CanTheUser.CrudType.CREATE),
            'Unless scratch org defaults have been changed by the user, this test should pass - asserting that users can create accounts'
        );
    }

    @isTest
    static void canCrudCreateAccountPositive() {
        System.Assert.isTrue(
            CanTheUser.create(new Account()),
            'Unless scratch org defaults have been changed by the user, this test should pass - asserting that users can create accounts'
        );
    }

    @isTest
    static void canCrudAccountReadPositive() {
        System.Assert.isTrue(
            CanTheUser.crud(new Account(), CanTheUser.CrudType.READ),
            'Expected to be able to read accounts'
        );
    }

    @isTest
    static void canCrudReadAccountPositive() {
        System.Assert.isTrue(
            CanTheUser.read(new Account()),
            'Expected to be able to read accounts'
        );
    }

    @isTest
    static void canCrudAccountUpdatePositive() {
        System.Assert.isTrue(
            CanTheUser.crud(new Account(), CanTheUser.CrudType.EDIT),
            'Expected to be able to update accounts'
        );
    }

    @isTest
    static void canCrudEditAccountPositive() {
        System.Assert.isTrue(
            CanTheUser.edit(new Account()),
            'Expected to be able to update accounts'
        );
    }

    @isTest
    static void canCrudAccountDeletePositive() {
        System.Assert.isTrue(
            CanTheUser.crud(new Account(), CanTheUser.CrudType.DEL),
            'Expected to be able to delete accounts'
        );
    }

    @isTest
    static void canCrudDestroyAccountPositive() {
        System.Assert.isTrue(
            CanTheUser.destroy(new Account()),
            'Expected to be able to delete accounts'
        );
    }

    @isTest
    static void getFLSofAccountNamePositive() {
        System.Assert.isTrue(
            CanTheUser.flsAccessible('Account', 'Name'),
            'Expected the name field to be accesible on Account'
        );
    }

    @isTest
    static void getFLSofAccountIDNegative() {
        System.Assert.isFalse(
            CanTheUser.flsUpdatable('Account', 'id'),
            'Expected that the ID of an object cannot be updated.'
        );
    }

    @isTest
    static void getBulkFLSAccessibleWithAccountPositive() {
        Set<String> fields = new Set<String>{ 'name', 'id' };
        Map<String, Boolean> bulkCheck = new Map<String, Boolean>();
        bulkCheck.put('name', true);
        bulkCheck.put('id', true);
        System.Assert.assertEquals(
            bulkCheck,
            CanTheUser.bulkFLSAccessible('Account', fields),
            'Expected all fields to be accesible on Account'
        );
    }

    @isTest
    static void getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() {
        Set<String> fields = new Set<String>{ 'name', 'nonExistingField__c' };
        Map<String, Boolean> bulkCheck = new Map<String, Boolean>();
        bulkCheck.put('name', true);
        bulkCheck.put('nonExistingField__c', false);
        System.Assert.assertEquals(
            bulkCheck,
            CanTheUser.bulkFLSAccessible('Account', fields),
            'Expected specific fields to be accesible on Account'
        );
    }
    
    @isTest
    static void getBulkFLSUpdatableWithAccountPositive() {
        Set<String> fields = new Set<String>{ 'name', 'ShippingStreet' };
        Map<String, Boolean> bulkCheck = new Map<String, Boolean>();
        bulkCheck.put('name', true);
        bulkCheck.put('ShippingStreet', true);
        System.Assert.assertEquals(
            bulkCheck,
            CanTheUser.bulkFLSUpdatable('Account', fields),
            'Expected all fields to be accesible on Account'
        );
    }

    @isTest
    static void getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() {
        Set<String> fields = new Set<String>{ 'name', 'nonExistingField__c' };
        Map<String, Boolean> bulkCheck = new Map<String, Boolean>();
        bulkCheck.put('name', true);
        bulkCheck.put('nonExistingField__c', false);
        System.Assert.assertEquals(
            bulkCheck,
            CanTheUser.bulkFLSUpdatable('Account', fields),
            'Expected specific fields to be accesible on Account'
        );
    }

    @isTest
    static void memoizedFLSMDCcomparesAccesibleToUpdatable() {
        Test.startTest();
        CanTheUser.memoizeFLSMDC('Account', CanTheUser.FLSType.UPDATABLE);
        Test.stopTest();

        System.Assert.assertNotEquals(
            CanTheUser.accessibleFieldsByObject.get('Account'),
            CanTheUser.updatableFieldsByObject.get('Account'),
            'Expected that the two sets would be different'
        );
    }
}